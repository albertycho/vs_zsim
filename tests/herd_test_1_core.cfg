// As simple as it gets: 1-core system with 2 short processes

sys = {
    cores = {
    	NicInCore = {
            type = "OOO";
            dcache = "nc0l1d";
            icache = "nc0l1i";
        };
        NicEgCore = {
            type = "OOO";
            dcache = "c1l1d";
            icache = "c1l1i";
        };
        OCore1 = {
			cores = 1; //num_server
            type = "OOO";
            dcache = "c2l1d";
            icache = "c2l1i";
            app_core = 1;
        };
    };


    lineSize = 64;

 
    caches = {
        nc0l1d = {
            size = 65536;
        };
        nc0l1i = {
            size = 32768;
        };
        c1l1d = {
            size = 65536;
        };
        c1l1i = {
            size = 32768;
        };
        c2l1d = {
			caches = 1; //num_server
            size = 65536;
        };
        c2l1i = {
			caches = 1; //num_server
            size = 32768;
        };
        l2 = {
            caches = 1; 
            type="Timing";
            mshrs = 64;
            size = 2097152;
            children = "nc0l1d|nc0l1i c2l1d|c2l1i c1l1i|c1l1d";  // interleave 
        };
    };
};

sim = {
    phaseLength = 10000;
	packet_injection_rate = 2;
    schedQuantum = 50;  // switch threads frequently
    num_keys=1024;
    update_fraction=25;
    // attachDebugger = True;
    //procStatsFilter = "l1.*|l2.*";
    //num_cores_serving_nw = 1;
};

process0 = {
    command = "./tests/nic_proxy_app";
};

process1 = {
    command = "./tests/nic_egress_proxy_app";
};


process2 = {
    command = "../herd-sonuma-zsim/build/herd \
--is-client 0 \
--machine-id 1 \
--total-nodes 1 \
--qps-to-create 1 \
--num-threads 1 \
--num-remote-threads 0 \
--num-keys 128 \
--num-server-buckets 1024 \
--log-capacity-bytes 2097152";
};


